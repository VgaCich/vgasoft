!vertex_shader
uniform vec3 LightPosition;
uniform float Time;

varying vec3 ObjPos;
varying float V;
varying float LightIntensity;

void  main(void)
{
  ObjPos=(vec3(gl_Vertex)+vec3(0.0, 0.0, Time))*0.2;
  
  vec3 pos=vec3(gl_ModelViewMatrix*gl_Vertex);
  vec3 tnorm=normalize(gl_NormalMatrix*gl_Normal);
  vec3 lightVec=normalize(LightPosition-pos);
  
  LightIntensity=max(dot(lightVec, tnorm), 0.0);
  
  V=gl_MultiTexCoord0.t;
  
  gl_Position=ftransform();
}
!fragment_shader
const float frequency=1.0;

varying vec3 ObjPos;
varying float V;
varying float LightIntensity;

uniform sampler3D Noise;

void main(void)
{
  float dp=length(vec2(dFdx(V), dFdy(V)));
  float logdp=-log2(dp*8.0);
  float ilogdp=floor(logdp);
  float stripes=exp2(ilogdp);
  
  float noise=texture3D(Noise, ObjPos).x;
  
  float sawtooth=fract((V+noise*0.1)*frequency*stripes);
  float triangle=abs(2.0*sawtooth-1.0);
  
  float transition=logdp-ilogdp;
  
  triangle=abs((1.0+transition)*triangle-transition);
  
  const float edgew=0.3;
  
  float edge0=clamp(LightIntensity-edgew, 0.0, 1.0);
  float edge1=clamp(LightIntensity, 0.0, 1.0);
  float square=1.0-smoothstep(edge0, edge1, triangle);
  
  gl_FragColor=vec4(vec3(square), 1.0);
}